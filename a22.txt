csv split 一行

一行 split string[] 完成初始格式
	    JavaPairRDD<String, String, Float> ratingExtraction = ratingData.mapToPair(s -> 
	    	{  
					String[] values = s.trim().split(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)",-1); 
	    		return 
	    			new Tuple2<String, String, Float>(values[0]+values[17],values[1],Float.parseFloat(values[8]));
	    	}
	    );
		
对values[1]进行排序 sortByKey

(放到map)collectAsMap() 排序后找到前两个  放入新的JavaPairRDD

运算 reduceByKey((x,y)->x/y)


		1.尝试新建个RDD
		List<Tuple2<String,String>> lt = new ArrayList<>();
		
		
		if(tmp >=2)
		{
		
				Tuple2<String,String> tp1 = new Tuple2<>(x._1,x._2);
				lt.add(tp1);
				
				return	new Tuple2<String,String>(x._1,"-T-"+x._2);
		}
		else
		{
				return	new Tuple2<String,String>(x._1,"-F-"+x._2);
		}
					

        JavaPairRDD<String,String> data = js.parallelizePairs(lt);
		
		2.尝试filter过滤
		//rdd.filter(_.contains("1")).count();
		//对传入的每个值，在call方法中判断是不是想要的，如果不是返回false，如果是返回true
        JavaRDD<String, String> listFileter=listRdd.filter(new Function<String,String,Boolean>(){

            private static final long serialVersionUID = 1L;

            @Override
            public Boolean call(String x1,String x2) throws Exception {
                // TODO Auto-generated method stub
					String[] values = x2.split("\|");
					int tmp = values.length;
					//String tmpS = String.valueOf(tmp);
                return tmp>=2?true:false;
            }
        });
		
		3. mapToPair reduceByKey
		A,a,1
		A,a,2
		B,b,5
		|||||
		A,a,3
		B,b,5
		JavaRDD<Tuple3<String, String, Double>> x = ...........;
        JavaPairRDD<Tuple2<String, String>, Double> result = x.mapToPair(
                new PairFunction<Tuple3<String, String, Double>, Tuple2<String, String>, Double>() {
                    @Override
                    public Tuple2<Tuple2<String, String>, Double> call(
                            Tuple3<String, String, Double> t)
                            throws Exception {
                        return new Tuple2<Tuple2<String, String>, Double>(
                                new Tuple2<String, String>(t._1(), t
                                        ._2()), t._3());
                    }
                }).reduceByKey(new Function2<Double, Double, Double>() {
            @Override
            public Double call(Double v1, Double v2) throws Exception {
                return v1 + v2;
            }
        });
		
		4. groupByKey +++遍历
		List<Tuple2<Integer,Integer>> list1=new ArrayList<Tuple2<Integer, Integer>>();
		list1.add(new Tuple2<Integer,Integer>(1,1));
		list1.add(new Tuple2<Integer, Integer>(2,2));
		list1.add(new Tuple2<Integer, Integer>(1,3));
		list1.add(new Tuple2<Integer, Integer>(2,4));
		JavaPairRDD<Integer,Integer> nums1=sc.parallelizePairs(list1);
	 
		JavaPairRDD<Integer,Iterable<Integer>>results =nums1.groupByKey();
	 
		//接下来遍历输出results，注意其中关于Iterable遍历的处理
		for(Tuple2<Integer,Iterable<Integer>> tuple :results.collect()){
		  System.out.print(tuple._1()+": ");
		  Iterator<Integer> it= tuple._2().iterator();
		  while(it.hasNext()){
		  System.out.print(it.next()+" ");
		  }
		  System.out.println();
		}
		
		
		
		1.
		5.rdd.sortBy(_._2,false).collect();
		
		2.
		val rdd2=rdd1.sortBy(f=>(f._1,f._3)).collect 
		
		3.
		//根据得到的value值排序而不是key，默认只提供了根据key排序
//那么想到的思路是，交换key、value，进行key排序，交换回来，完成value排序
counts
    //交换key-value，注意类型
    .mapToPair(s -> new Tuple2<Integer, String>(s._2, s._1))
    //倒序
    .sortByKey(false)
    //交换key-value，注意类型
    .mapToPair(s -> new Tuple2<String, Integer>(s._2, s._1))
    //转成集合
    .collect()
    //输出
    .forEach(tuple -> System.out.println(tuple._1() + ": " + tuple._2()));
	
	
	4.
	
	import java.io.Serializable;  
	import java.util.Comparator;  
  
	public class MyComparator implements Comparator<Integer>, Serializable{  
		public int compare(Integer x, Integer y) {  
			return -(y-x);  
		}   
	} 
	JavaPairRDD<Integer, Integer> sortRDD = line2.sortByKey(new  MyComparator());  
	
	
	5.自定义比较器：
	public class MyComparator implements Comparator<String>,Serializable {
    @Override
    public int compare(String o1, String o2) {
        return Integer.valueOf(o1).compareTo(Integer.valueOf(o2));
    }
}

    JavaPairRDD<String, Integer> res = pairRDD.sortByKey();
			
	